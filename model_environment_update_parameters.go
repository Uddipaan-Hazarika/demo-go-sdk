/*
Delphix API Gateway

Delphix API Gateway API

API version: 1.0
Contact: support@delphix.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package delphix_dct_api

import (
	"encoding/json"
)

// EnvironmentUpdateParameters struct for EnvironmentUpdateParameters
type EnvironmentUpdateParameters struct {
	// The name of the environment.
	Name *string `json:"name,omitempty"`
	// host address of the machine.
	Hostname *string `json:"hostname,omitempty"`
	// Id of the connector environment which is used to connect to this source environment.
	StagingEnvironment *string `json:"staging_environment,omitempty"`
	// Specify port on which Delphix connector will run.
	ConnectorPort *int32 `json:"connector_port,omitempty"`
	// array of ip addresses or hostnames
	NfsAddresses []string `json:"nfs_addresses,omitempty"`
	// ssh port of the host.
	SshPort *int64 `json:"ssh_port,omitempty"`
	// The path for the toolkit that resides on the host.
	ToolkitPath *string `json:"toolkit_path,omitempty"`
	// The path to the user managed Java Development Kit (JDK). If not specified, then the OpenJDK will be used.
	JavaHome *string `json:"java_home,omitempty"`
	// DSP keystore path.
	DspKeystorePath *string `json:"dsp_keystore_path,omitempty"`
	// DSP keystore password.
	DspKeystorePassword *string `json:"dsp_keystore_password,omitempty"`
	// DSP keystore alias.
	DspKeystoreAlias *string `json:"dsp_keystore_alias,omitempty"`
	// DSP truststore path.
	DspTruststorePath *string `json:"dsp_truststore_path,omitempty"`
	// DSP truststore password.
	DspTruststorePassword *string `json:"dsp_truststore_password,omitempty"`
	// The environment description.
	Description *string `json:"description,omitempty"`
}

// NewEnvironmentUpdateParameters instantiates a new EnvironmentUpdateParameters object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewEnvironmentUpdateParameters() *EnvironmentUpdateParameters {
	this := EnvironmentUpdateParameters{}
	return &this
}

// NewEnvironmentUpdateParametersWithDefaults instantiates a new EnvironmentUpdateParameters object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewEnvironmentUpdateParametersWithDefaults() *EnvironmentUpdateParameters {
	this := EnvironmentUpdateParameters{}
	return &this
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *EnvironmentUpdateParameters) GetName() string {
	if o == nil || o.Name == nil {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EnvironmentUpdateParameters) GetNameOk() (*string, bool) {
	if o == nil || o.Name == nil {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *EnvironmentUpdateParameters) HasName() bool {
	if o != nil && o.Name != nil {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *EnvironmentUpdateParameters) SetName(v string) {
	o.Name = &v
}

// GetHostname returns the Hostname field value if set, zero value otherwise.
func (o *EnvironmentUpdateParameters) GetHostname() string {
	if o == nil || o.Hostname == nil {
		var ret string
		return ret
	}
	return *o.Hostname
}

// GetHostnameOk returns a tuple with the Hostname field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EnvironmentUpdateParameters) GetHostnameOk() (*string, bool) {
	if o == nil || o.Hostname == nil {
		return nil, false
	}
	return o.Hostname, true
}

// HasHostname returns a boolean if a field has been set.
func (o *EnvironmentUpdateParameters) HasHostname() bool {
	if o != nil && o.Hostname != nil {
		return true
	}

	return false
}

// SetHostname gets a reference to the given string and assigns it to the Hostname field.
func (o *EnvironmentUpdateParameters) SetHostname(v string) {
	o.Hostname = &v
}

// GetStagingEnvironment returns the StagingEnvironment field value if set, zero value otherwise.
func (o *EnvironmentUpdateParameters) GetStagingEnvironment() string {
	if o == nil || o.StagingEnvironment == nil {
		var ret string
		return ret
	}
	return *o.StagingEnvironment
}

// GetStagingEnvironmentOk returns a tuple with the StagingEnvironment field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EnvironmentUpdateParameters) GetStagingEnvironmentOk() (*string, bool) {
	if o == nil || o.StagingEnvironment == nil {
		return nil, false
	}
	return o.StagingEnvironment, true
}

// HasStagingEnvironment returns a boolean if a field has been set.
func (o *EnvironmentUpdateParameters) HasStagingEnvironment() bool {
	if o != nil && o.StagingEnvironment != nil {
		return true
	}

	return false
}

// SetStagingEnvironment gets a reference to the given string and assigns it to the StagingEnvironment field.
func (o *EnvironmentUpdateParameters) SetStagingEnvironment(v string) {
	o.StagingEnvironment = &v
}

// GetConnectorPort returns the ConnectorPort field value if set, zero value otherwise.
func (o *EnvironmentUpdateParameters) GetConnectorPort() int32 {
	if o == nil || o.ConnectorPort == nil {
		var ret int32
		return ret
	}
	return *o.ConnectorPort
}

// GetConnectorPortOk returns a tuple with the ConnectorPort field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EnvironmentUpdateParameters) GetConnectorPortOk() (*int32, bool) {
	if o == nil || o.ConnectorPort == nil {
		return nil, false
	}
	return o.ConnectorPort, true
}

// HasConnectorPort returns a boolean if a field has been set.
func (o *EnvironmentUpdateParameters) HasConnectorPort() bool {
	if o != nil && o.ConnectorPort != nil {
		return true
	}

	return false
}

// SetConnectorPort gets a reference to the given int32 and assigns it to the ConnectorPort field.
func (o *EnvironmentUpdateParameters) SetConnectorPort(v int32) {
	o.ConnectorPort = &v
}

// GetNfsAddresses returns the NfsAddresses field value if set, zero value otherwise.
func (o *EnvironmentUpdateParameters) GetNfsAddresses() []string {
	if o == nil || o.NfsAddresses == nil {
		var ret []string
		return ret
	}
	return o.NfsAddresses
}

// GetNfsAddressesOk returns a tuple with the NfsAddresses field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EnvironmentUpdateParameters) GetNfsAddressesOk() ([]string, bool) {
	if o == nil || o.NfsAddresses == nil {
		return nil, false
	}
	return o.NfsAddresses, true
}

// HasNfsAddresses returns a boolean if a field has been set.
func (o *EnvironmentUpdateParameters) HasNfsAddresses() bool {
	if o != nil && o.NfsAddresses != nil {
		return true
	}

	return false
}

// SetNfsAddresses gets a reference to the given []string and assigns it to the NfsAddresses field.
func (o *EnvironmentUpdateParameters) SetNfsAddresses(v []string) {
	o.NfsAddresses = v
}

// GetSshPort returns the SshPort field value if set, zero value otherwise.
func (o *EnvironmentUpdateParameters) GetSshPort() int64 {
	if o == nil || o.SshPort == nil {
		var ret int64
		return ret
	}
	return *o.SshPort
}

// GetSshPortOk returns a tuple with the SshPort field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EnvironmentUpdateParameters) GetSshPortOk() (*int64, bool) {
	if o == nil || o.SshPort == nil {
		return nil, false
	}
	return o.SshPort, true
}

// HasSshPort returns a boolean if a field has been set.
func (o *EnvironmentUpdateParameters) HasSshPort() bool {
	if o != nil && o.SshPort != nil {
		return true
	}

	return false
}

// SetSshPort gets a reference to the given int64 and assigns it to the SshPort field.
func (o *EnvironmentUpdateParameters) SetSshPort(v int64) {
	o.SshPort = &v
}

// GetToolkitPath returns the ToolkitPath field value if set, zero value otherwise.
func (o *EnvironmentUpdateParameters) GetToolkitPath() string {
	if o == nil || o.ToolkitPath == nil {
		var ret string
		return ret
	}
	return *o.ToolkitPath
}

// GetToolkitPathOk returns a tuple with the ToolkitPath field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EnvironmentUpdateParameters) GetToolkitPathOk() (*string, bool) {
	if o == nil || o.ToolkitPath == nil {
		return nil, false
	}
	return o.ToolkitPath, true
}

// HasToolkitPath returns a boolean if a field has been set.
func (o *EnvironmentUpdateParameters) HasToolkitPath() bool {
	if o != nil && o.ToolkitPath != nil {
		return true
	}

	return false
}

// SetToolkitPath gets a reference to the given string and assigns it to the ToolkitPath field.
func (o *EnvironmentUpdateParameters) SetToolkitPath(v string) {
	o.ToolkitPath = &v
}

// GetJavaHome returns the JavaHome field value if set, zero value otherwise.
func (o *EnvironmentUpdateParameters) GetJavaHome() string {
	if o == nil || o.JavaHome == nil {
		var ret string
		return ret
	}
	return *o.JavaHome
}

// GetJavaHomeOk returns a tuple with the JavaHome field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EnvironmentUpdateParameters) GetJavaHomeOk() (*string, bool) {
	if o == nil || o.JavaHome == nil {
		return nil, false
	}
	return o.JavaHome, true
}

// HasJavaHome returns a boolean if a field has been set.
func (o *EnvironmentUpdateParameters) HasJavaHome() bool {
	if o != nil && o.JavaHome != nil {
		return true
	}

	return false
}

// SetJavaHome gets a reference to the given string and assigns it to the JavaHome field.
func (o *EnvironmentUpdateParameters) SetJavaHome(v string) {
	o.JavaHome = &v
}

// GetDspKeystorePath returns the DspKeystorePath field value if set, zero value otherwise.
func (o *EnvironmentUpdateParameters) GetDspKeystorePath() string {
	if o == nil || o.DspKeystorePath == nil {
		var ret string
		return ret
	}
	return *o.DspKeystorePath
}

// GetDspKeystorePathOk returns a tuple with the DspKeystorePath field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EnvironmentUpdateParameters) GetDspKeystorePathOk() (*string, bool) {
	if o == nil || o.DspKeystorePath == nil {
		return nil, false
	}
	return o.DspKeystorePath, true
}

// HasDspKeystorePath returns a boolean if a field has been set.
func (o *EnvironmentUpdateParameters) HasDspKeystorePath() bool {
	if o != nil && o.DspKeystorePath != nil {
		return true
	}

	return false
}

// SetDspKeystorePath gets a reference to the given string and assigns it to the DspKeystorePath field.
func (o *EnvironmentUpdateParameters) SetDspKeystorePath(v string) {
	o.DspKeystorePath = &v
}

// GetDspKeystorePassword returns the DspKeystorePassword field value if set, zero value otherwise.
func (o *EnvironmentUpdateParameters) GetDspKeystorePassword() string {
	if o == nil || o.DspKeystorePassword == nil {
		var ret string
		return ret
	}
	return *o.DspKeystorePassword
}

// GetDspKeystorePasswordOk returns a tuple with the DspKeystorePassword field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EnvironmentUpdateParameters) GetDspKeystorePasswordOk() (*string, bool) {
	if o == nil || o.DspKeystorePassword == nil {
		return nil, false
	}
	return o.DspKeystorePassword, true
}

// HasDspKeystorePassword returns a boolean if a field has been set.
func (o *EnvironmentUpdateParameters) HasDspKeystorePassword() bool {
	if o != nil && o.DspKeystorePassword != nil {
		return true
	}

	return false
}

// SetDspKeystorePassword gets a reference to the given string and assigns it to the DspKeystorePassword field.
func (o *EnvironmentUpdateParameters) SetDspKeystorePassword(v string) {
	o.DspKeystorePassword = &v
}

// GetDspKeystoreAlias returns the DspKeystoreAlias field value if set, zero value otherwise.
func (o *EnvironmentUpdateParameters) GetDspKeystoreAlias() string {
	if o == nil || o.DspKeystoreAlias == nil {
		var ret string
		return ret
	}
	return *o.DspKeystoreAlias
}

// GetDspKeystoreAliasOk returns a tuple with the DspKeystoreAlias field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EnvironmentUpdateParameters) GetDspKeystoreAliasOk() (*string, bool) {
	if o == nil || o.DspKeystoreAlias == nil {
		return nil, false
	}
	return o.DspKeystoreAlias, true
}

// HasDspKeystoreAlias returns a boolean if a field has been set.
func (o *EnvironmentUpdateParameters) HasDspKeystoreAlias() bool {
	if o != nil && o.DspKeystoreAlias != nil {
		return true
	}

	return false
}

// SetDspKeystoreAlias gets a reference to the given string and assigns it to the DspKeystoreAlias field.
func (o *EnvironmentUpdateParameters) SetDspKeystoreAlias(v string) {
	o.DspKeystoreAlias = &v
}

// GetDspTruststorePath returns the DspTruststorePath field value if set, zero value otherwise.
func (o *EnvironmentUpdateParameters) GetDspTruststorePath() string {
	if o == nil || o.DspTruststorePath == nil {
		var ret string
		return ret
	}
	return *o.DspTruststorePath
}

// GetDspTruststorePathOk returns a tuple with the DspTruststorePath field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EnvironmentUpdateParameters) GetDspTruststorePathOk() (*string, bool) {
	if o == nil || o.DspTruststorePath == nil {
		return nil, false
	}
	return o.DspTruststorePath, true
}

// HasDspTruststorePath returns a boolean if a field has been set.
func (o *EnvironmentUpdateParameters) HasDspTruststorePath() bool {
	if o != nil && o.DspTruststorePath != nil {
		return true
	}

	return false
}

// SetDspTruststorePath gets a reference to the given string and assigns it to the DspTruststorePath field.
func (o *EnvironmentUpdateParameters) SetDspTruststorePath(v string) {
	o.DspTruststorePath = &v
}

// GetDspTruststorePassword returns the DspTruststorePassword field value if set, zero value otherwise.
func (o *EnvironmentUpdateParameters) GetDspTruststorePassword() string {
	if o == nil || o.DspTruststorePassword == nil {
		var ret string
		return ret
	}
	return *o.DspTruststorePassword
}

// GetDspTruststorePasswordOk returns a tuple with the DspTruststorePassword field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EnvironmentUpdateParameters) GetDspTruststorePasswordOk() (*string, bool) {
	if o == nil || o.DspTruststorePassword == nil {
		return nil, false
	}
	return o.DspTruststorePassword, true
}

// HasDspTruststorePassword returns a boolean if a field has been set.
func (o *EnvironmentUpdateParameters) HasDspTruststorePassword() bool {
	if o != nil && o.DspTruststorePassword != nil {
		return true
	}

	return false
}

// SetDspTruststorePassword gets a reference to the given string and assigns it to the DspTruststorePassword field.
func (o *EnvironmentUpdateParameters) SetDspTruststorePassword(v string) {
	o.DspTruststorePassword = &v
}

// GetDescription returns the Description field value if set, zero value otherwise.
func (o *EnvironmentUpdateParameters) GetDescription() string {
	if o == nil || o.Description == nil {
		var ret string
		return ret
	}
	return *o.Description
}

// GetDescriptionOk returns a tuple with the Description field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EnvironmentUpdateParameters) GetDescriptionOk() (*string, bool) {
	if o == nil || o.Description == nil {
		return nil, false
	}
	return o.Description, true
}

// HasDescription returns a boolean if a field has been set.
func (o *EnvironmentUpdateParameters) HasDescription() bool {
	if o != nil && o.Description != nil {
		return true
	}

	return false
}

// SetDescription gets a reference to the given string and assigns it to the Description field.
func (o *EnvironmentUpdateParameters) SetDescription(v string) {
	o.Description = &v
}

func (o EnvironmentUpdateParameters) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Name != nil {
		toSerialize["name"] = o.Name
	}
	if o.Hostname != nil {
		toSerialize["hostname"] = o.Hostname
	}
	if o.StagingEnvironment != nil {
		toSerialize["staging_environment"] = o.StagingEnvironment
	}
	if o.ConnectorPort != nil {
		toSerialize["connector_port"] = o.ConnectorPort
	}
	if o.NfsAddresses != nil {
		toSerialize["nfs_addresses"] = o.NfsAddresses
	}
	if o.SshPort != nil {
		toSerialize["ssh_port"] = o.SshPort
	}
	if o.ToolkitPath != nil {
		toSerialize["toolkit_path"] = o.ToolkitPath
	}
	if o.JavaHome != nil {
		toSerialize["java_home"] = o.JavaHome
	}
	if o.DspKeystorePath != nil {
		toSerialize["dsp_keystore_path"] = o.DspKeystorePath
	}
	if o.DspKeystorePassword != nil {
		toSerialize["dsp_keystore_password"] = o.DspKeystorePassword
	}
	if o.DspKeystoreAlias != nil {
		toSerialize["dsp_keystore_alias"] = o.DspKeystoreAlias
	}
	if o.DspTruststorePath != nil {
		toSerialize["dsp_truststore_path"] = o.DspTruststorePath
	}
	if o.DspTruststorePassword != nil {
		toSerialize["dsp_truststore_password"] = o.DspTruststorePassword
	}
	if o.Description != nil {
		toSerialize["description"] = o.Description
	}
	return json.Marshal(toSerialize)
}

type NullableEnvironmentUpdateParameters struct {
	value *EnvironmentUpdateParameters
	isSet bool
}

func (v NullableEnvironmentUpdateParameters) Get() *EnvironmentUpdateParameters {
	return v.value
}

func (v *NullableEnvironmentUpdateParameters) Set(val *EnvironmentUpdateParameters) {
	v.value = val
	v.isSet = true
}

func (v NullableEnvironmentUpdateParameters) IsSet() bool {
	return v.isSet
}

func (v *NullableEnvironmentUpdateParameters) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableEnvironmentUpdateParameters(val *EnvironmentUpdateParameters) *NullableEnvironmentUpdateParameters {
	return &NullableEnvironmentUpdateParameters{value: val, isSet: true}
}

func (v NullableEnvironmentUpdateParameters) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableEnvironmentUpdateParameters) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


