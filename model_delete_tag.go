/*
Delphix API Gateway

Delphix API Gateway API

API version: 1.0
Contact: support@delphix.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package delphix_dct_api

import (
	"encoding/json"
)

// DeleteTag struct for DeleteTag
type DeleteTag struct {
	// Key of the tag
	Key string `json:"key"`
	// Value of the tag
	Value *string `json:"value,omitempty"`
}

// NewDeleteTag instantiates a new DeleteTag object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewDeleteTag(key string) *DeleteTag {
	this := DeleteTag{}
	this.Key = key
	return &this
}

// NewDeleteTagWithDefaults instantiates a new DeleteTag object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewDeleteTagWithDefaults() *DeleteTag {
	this := DeleteTag{}
	return &this
}

// GetKey returns the Key field value
func (o *DeleteTag) GetKey() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Key
}

// GetKeyOk returns a tuple with the Key field value
// and a boolean to check if the value has been set.
func (o *DeleteTag) GetKeyOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.Key, true
}

// SetKey sets field value
func (o *DeleteTag) SetKey(v string) {
	o.Key = v
}

// GetValue returns the Value field value if set, zero value otherwise.
func (o *DeleteTag) GetValue() string {
	if o == nil || o.Value == nil {
		var ret string
		return ret
	}
	return *o.Value
}

// GetValueOk returns a tuple with the Value field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DeleteTag) GetValueOk() (*string, bool) {
	if o == nil || o.Value == nil {
		return nil, false
	}
	return o.Value, true
}

// HasValue returns a boolean if a field has been set.
func (o *DeleteTag) HasValue() bool {
	if o != nil && o.Value != nil {
		return true
	}

	return false
}

// SetValue gets a reference to the given string and assigns it to the Value field.
func (o *DeleteTag) SetValue(v string) {
	o.Value = &v
}

func (o DeleteTag) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["key"] = o.Key
	}
	if o.Value != nil {
		toSerialize["value"] = o.Value
	}
	return json.Marshal(toSerialize)
}

type NullableDeleteTag struct {
	value *DeleteTag
	isSet bool
}

func (v NullableDeleteTag) Get() *DeleteTag {
	return v.value
}

func (v *NullableDeleteTag) Set(val *DeleteTag) {
	v.value = val
	v.isSet = true
}

func (v NullableDeleteTag) IsSet() bool {
	return v.isSet
}

func (v *NullableDeleteTag) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableDeleteTag(val *DeleteTag) *NullableDeleteTag {
	return &NullableDeleteTag{value: val, isSet: true}
}

func (v NullableDeleteTag) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableDeleteTag) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


